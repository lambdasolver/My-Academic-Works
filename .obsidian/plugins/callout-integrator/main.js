/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => calloutIntegrator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var calloutIntegrator = class extends import_obsidian.Plugin {
  onload() {
    this.addCommand({
      id: "callout-integrate",
      name: "integrate",
      editorCallback: (editor) => {
        let selection = editor.getSelection();
        if (selection != "") {
          editor.replaceSelection("> " + selection.replace(/\n/g, "\n> "));
        }
      }
    });
    this.addCommand({
      id: "callout-unintegrate",
      name: "un-integrate",
      editorCallback: (editor) => {
        let selection2 = editor.getSelection();
        if (selection2.charAt(0) === ">") {
          selection2 = selection2.substring(1);
          if (selection2.charAt(0) === " ") {
            selection2 = selection2.substring(1);
          }
        }
        editor.replaceSelection(selection2.replace(/\n> /g, "\n"));
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGNhbGxvdXRJbnRlZ3JhdG9yIGV4dGVuZHMgUGx1Z2luIHtcblxuXHRvbmxvYWQoKSB7XG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnY2FsbG91dC1pbnRlZ3JhdGUnLFxuXHRcdFx0bmFtZTogJ2ludGVncmF0ZScsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yKSA9PiB7XG5cdFx0XHRcdGxldCBzZWxlY3Rpb24gPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7IFx0XHRcdFx0XHRcdFx0XHRcdC8vZ2V0cyBoaWdobGlnaHRlZCBzZWxlY3Rpb25cblx0XHRcdFx0aWYgKHNlbGVjdGlvbiAhPSBcIlwiKSB7XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvL21ha2Ugc3VyZSBzZWxlY3Rpb24gaXNuJ3QgZW1wdHlcblx0XHRcdFx0XHRlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihcIj4gXCIgKyBzZWxlY3Rpb24ucmVwbGFjZSgvXFxuL2csIFwiXFxuPiBcIikpOyBcdC8vYWRkcyBcIj4gXCIgYmVmb3JlIGVhY2ggbGluZTsgbmVlZCB0aGUgaW5pdGlhbCBcIj4gXCIgc2VwYXJhdGVseSBhcyBpdCBkb2Vzbid0IHJlZ2lzdGVyIGFzIGEgbmV3IGxpbmVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnY2FsbG91dC11bmludGVncmF0ZScsXG5cdFx0XHRuYW1lOiAndW4taW50ZWdyYXRlJyxcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IpID0+IHtcblx0XHRcdFx0bGV0IHNlbGVjdGlvbjIgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7IFx0XHRcdFx0XHRcdFx0XHQvL2dldHMgaGlnaGxpZ2h0ZWQgc2VsZWN0aW9uXG5cdFx0XHRcdGlmIChzZWxlY3Rpb24yLmNoYXJBdCgwKSA9PT0gJz4nKSB7IFx0XHRcdFx0XHRcdFx0XHRcdC8vIHRlc3QgaWYgdGhlcmUgaXMgYSBcIj5cIiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWxlY3Rpb25cblx0XHRcdFx0XHRzZWxlY3Rpb24yID0gc2VsZWN0aW9uMi5zdWJzdHJpbmcoMSk7IFx0XHRcdFx0XHRcdFx0XHQvLyBjdXRzIG91dCB0aGUgXCI+XCJcblx0XHRcdFx0XHRpZiAoc2VsZWN0aW9uMi5jaGFyQXQoMCkgPT09ICcgJykge1x0XHRcdFx0XHRcdFx0XHRcdC8vY2hlY2sgZm9yIHNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlbGVjdGlvblxuXHRcdFx0XHRcdFx0c2VsZWN0aW9uMiA9IHNlbGVjdGlvbjIuc3Vic3RyaW5nKDEpO1x0XHRcdFx0XHRcdFx0Ly8gY3V0cyBvdXQgdGhlIHNwYWNlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKHNlbGVjdGlvbjIucmVwbGFjZSgvXFxuPiAvZywgXCJcXG5cIikpOyBcdFx0XHQvLyBjdXRzIGV2ZXJ5IFwiPiBcIiBvY2N1cnJpbmcgYWZ0ZXIgYSBuZXcgbGluZVxuXHRcdFx0fVxuXHRcdH0pXG5cdH1cblxuXHRvbnVubG9hZCgpIHtcblxuXHR9XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE0RjtBQUc1RixJQUFxQixvQkFBckIsY0FBK0MsdUJBQU87QUFBQSxFQUVyRCxTQUFTO0FBQ1IsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixnQkFBZ0IsQ0FBQyxXQUFtQjtBQUNuQyxZQUFJLFlBQVksT0FBTyxhQUFhO0FBQ3BDLFlBQUksYUFBYSxJQUFJO0FBQ3BCLGlCQUFPLGlCQUFpQixPQUFPLFVBQVUsUUFBUSxPQUFPLE1BQU0sQ0FBQztBQUFBLFFBQ2hFO0FBQUEsTUFDRDtBQUFBLElBQ0QsQ0FBQztBQUNELFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sZ0JBQWdCLENBQUMsV0FBbUI7QUFDbkMsWUFBSSxhQUFhLE9BQU8sYUFBYTtBQUNyQyxZQUFJLFdBQVcsT0FBTyxDQUFDLE1BQU0sS0FBSztBQUNqQyx1QkFBYSxXQUFXLFVBQVUsQ0FBQztBQUNuQyxjQUFJLFdBQVcsT0FBTyxDQUFDLE1BQU0sS0FBSztBQUNqQyx5QkFBYSxXQUFXLFVBQVUsQ0FBQztBQUFBLFVBQ3BDO0FBQUEsUUFDRDtBQUNBLGVBQU8saUJBQWlCLFdBQVcsUUFBUSxTQUFTLElBQUksQ0FBQztBQUFBLE1BQzFEO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUFBLEVBRVg7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
