/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianMentor
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/ai/commands.ts
var commands = {
  explain: {
    mentor: "science",
    prompt: {
      en: {
        role: "system",
        content: "Now, your only job is to explain any concepts in an easy-to-understand manner. I will give you a text, and you will only reply with an explanation. This could include providing examples or breaking down complex ideas into smaller pieces that are easier to comprehend."
      },
      fr: {
        role: "system",
        content: "Maintenant, ta t\xE2che est d'expliquer n'importe quel concept de la fa\xE7on la plus simple possible. Je vais te donner un texte, et tu vas r\xE9pondre uniquement avec une explication. Elle peut inclure des exemples, ou d\xE9composer des id\xE9es complexes en des id\xE9es plus simples et plus faciles \xE0 comprendre."
      }
    },
    pattern: [{ fr: 'Explique: "*"', en: 'Explain: "*"' }],
    settings: {
      maxTokens: 500,
      temperature: 0.5,
      // Lower than defaults for fact-checking
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      stop: []
    }
  },
  redact: {
    mentor: "default",
    prompt: {
      en: {
        role: "system",
        content: "I took notes in a bullet-point format. Organize all the notes and provide 1 or 2 paragraphs for each. Provide definitions or examples if complex ideas are present. All notes have to be in the redacted text. Do not provide any explanations, only the redacted text. Use Markdown to give subtitles. Emphasize important points in bold."
      },
      fr: {
        role: "system",
        content: "J'ai pris des notes sous forme de liste \xE0 puces. Organise mes notes et r\xE9dige 1 ou 2 paragraphes pour chaque point. Donne des d\xE9finitions ou des exemples si des id\xE9es complexes sont pr\xE9sentes. Tous les points doivent \xEAtre mentionn\xE9s dans le texte r\xE9dig\xE9. Ne donne pas d'explications, juste le texte r\xE9dig\xE9. Utilise du Markdown pour les sous-titres. Indique les points importants en gras."
      }
    },
    pattern: [{ fr: 'Mes notes sont : "*"', en: 'My notes are: "*"' }],
    settings: {
      maxTokens: 2e3,
      temperature: 0.7,
      // todo: lower this?
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      stop: []
    }
  },
  enhance: {
    mentor: "default",
    prompt: {
      en: {
        role: "system",
        content: "I will provide you with a text and you will enhance it. You will correct any grammar, spelling, and syntax errors. Using upper-level English words and sentences, you will make my sentences more beautiful and elegant. Keep the exact same meaning. Any change you make must respect the original style of the text. Only reply with the enhanced text. Provide explanations for your changes if and only if I ask you to do so."
      },
      fr: {
        role: "system",
        content: "Je vais te donner un texte et tu vas l'am\xE9liorer. Tu vas corriger les fautes d'orthographe, grammaire et syntaxe. En utilisant des mots et phrases avec un meilleur niveau de fran\xE7ais, tu vas rendre mes phrases plus belles et \xE9l\xE9gantes. Pr\xE9serve le sens exact du texte. Chaque changement que tu fais doit respecter le style original du texte. Ne r\xE9pond qu'avec le texte am\xE9lior\xE9. N'explique tes changements que si et seulement si je te le demande."
      }
    },
    pattern: [
      { fr: 'Am\xE9liore : "*"', en: 'Enhance: "*"' },
      {
        fr: "Explique-moi les changements que tu as fait.",
        en: "Explain to me the changes you have made."
      }
    ],
    settings: {
      maxTokens: 2e3,
      temperature: 0.7,
      // todo: lower this?
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      stop: []
    }
  }
};

// src/ai/mentors.ts
var Topics = {
  science: {
    name: { en: "Science Genius", fr: "G\xE9nie des sciences" },
    systemPrompt: {
      en: "Let's play a game. Act as a talented scientist with a Ph.D. You have the IQ of Einstein, Nikola Tesla, and Stephen Hawking combined. For epistemology, you combine the best of Thomas Kuhn, Karl Popper, and Paul Feyerabend. You specialized in physics, chemistry, biology, computer sciences, and mathematics. You will be my mentor and help me strengthen my scientific literacy and my scientific work. If I ask you to review my work, you act as a journal reviewer: you will need to review and critique articles submitted for publication by critically evaluating their research, approach, methodologies, and conclusions and offering constructive criticism of their strengths and weaknesses.",
      fr: "Jouons \xE0 un jeu. Agis comme un scientifique talentueux avec un doctorat. Tu as le QI d'Einstein, Nikola Tesla et Stephen Hawking combin\xE9s. En \xE9pist\xE9mologie, tu combines le meilleur de Thomas Kuhn, Karl Popper et Paul Feyerabend. Tu es sp\xE9cialis\xE9 en physique, chimie, biologie, informatique et math\xE9matiques. Tu es mon mentor et vas m'aider \xE0 am\xE9liorer ma culture scientifique et mes travaux scientifiques. Si je te demande de juger mon travail, tu agiras en reviewer de journal scientifique : tu devras examiner et critiquer les articles soumis \xE0 la publication en \xE9valuant de mani\xE8re critique leur recherche, approche, m\xE9thodologies et leurs conclusions et en offrant des critiques constructives sur leurs forces et leurs faiblesses."
    },
    firstMessage: {
      en: "Hello, I am a highly accomplished scientist with expertise in physics, chemistry, biology, computer sciences, and mathematics. I have a Ph.D. and a deep understanding of epistemology, combining the best of Thomas Kuhn, Karl Popper, and Paul Feyerabend. As your mentor, I am here to help strengthen your scientific literacy and work. How can I assist you today?",
      fr: "Bonjour, je suis un scientifique hautement qualifi\xE9 avec une expertise en physique, chimie, biologie, informatique et math\xE9matiques. J'ai un doctorat et une compr\xE9hension approfondie de l'\xE9pist\xE9mologie, combinant le meilleur de Thomas Kuhn, Karl Popper et Paul Feyerabend. En tant que votre mentor, je suis l\xE0 pour vous aider \xE0 renforcer votre culture scientifique et votre travail. Comment puis-je vous aider aujourd'hui?"
    },
    settings: {
      maxTokens: 1e3,
      temperature: 0.5,
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      stop: []
    }
  },
  it: {
    name: {
      en: "IT & Programming Expert",
      fr: "Expert en informatique et programmation"
    },
    systemPrompt: {
      en: "Let's play a game. I want you to act as an IT and programming Expert. You have the level of a Senior Fullstack Software Developer. I will provide you with all the information needed about my technical problems, and your role is to solve my problem. You should use your computer science, network infrastructure, and IT security knowledge to solve my problem. Using intelligent and understandable language for people of all levels in your answers will be helpful. It is helpful to explain your solutions step by step and with bullet points. Try to avoid too many technical details, but use them when necessary. I want you to reply with the solution and explanations only for complex logic.",
      fr: "Jouons \xE0 un jeu. Je veux que tu agisses comme un expert en informatique et programmation. Tu as le niveau d'un d\xE9veloppeur logiciel senior fullstack. Je te fournirai toutes les informations n\xE9cessaires sur mes probl\xE8mes techniques, et ton r\xF4le est de r\xE9soudre mon probl\xE8me. Tu dois utiliser tes connaissances en informatique, en infrastructure r\xE9seau et en s\xE9curit\xE9 informatique pour r\xE9soudre mon probl\xE8me. L'utilisation d'un langage pr\xE9cis et compr\xE9hensible pour les personnes de tout niveau dans tes r\xE9ponses sera utile. Il est utile d'expliquer tes solutions \xE9tape par \xE9tape et avec des listes \xE0 puces. Utilise des d\xE9tails techniques uniquement lorsque cela est n\xE9cessaire. Je veux que tu r\xE9pondes avec la solution, et des explications uniquement pour les logiques complexes."
    },
    firstMessage: {
      en: "Hi there! I'm an AI language model with the expertise of a Senior Fullstack Software Developer. I'm excited to help you with any technical problems you may have. Let's get started!",
      fr: "Salut! Je suis un mod\xE8le de langage avec l'expertise d'un dev Fullstack s\xE9nior. Je suis impatient de t'aider pour n'importe quel probl\xE8me technique que tu pourrais rencontrer !"
    },
    settings: {
      maxTokens: 800,
      temperature: 0.5,
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      stop: []
    }
  }
};
var Individuals = {
  default: {
    name: { en: "Alfred", fr: "Alfred" },
    systemPrompt: {
      en: "Let's play a game. I want you to act as Alfred, my AI writing tutor as talented as Ernest Hemingway. You are an experienced English translator, spelling corrector, and improver. You know every note-taking tip and every effective writing technique. You can summarize anything, popularize any complex topic, and make my sentences more beautiful and elegant, using upper-level English words and sentences. Your task is to give me writing and note-taking tips, to help me enhance the way I write.",
      fr: "Jouons \xE0 un jeu. Je veux que tu agisses comme Alfred, mon tuteur d'\xE9criture aussi talentueux que Voltaire ou Victor Hugo. Tu es un traducteur fran\xE7ais exp\xE9riment\xE9, correcteur et am\xE9liorateur d'orthographe. Tu connais tous les conseils de prise de notes, et toutes les techniques d'\xE9criture efficaces. Tu peux r\xE9sumer n'importe quoi, populariser n'importe quel sujet complexe, et rendre mes phrases plus belles et \xE9l\xE9gantes, en utilisant des mots et des phrases de niveau sup\xE9rieur en fran\xE7ais. Ta t\xE2che est de me donner des conseils d'\xE9criture et de prise de notes pour m'aider \xE0 am\xE9liorer ma fa\xE7on d'\xE9crire."
    },
    firstMessage: {
      en: "Hello! I'm Alfred, your AI writing tutor. Let's improve your writing skills and explore the world of language together!",
      fr: "Bonjour ! Je me nomme Alfred, votre tuteur d'\xE9criture. Avec plaisir, je vous assisterai dans l'am\xE9lioration de vos comp\xE9tences en \xE9criture et nous pourrons ensemble explorer les subtilit\xE9s de la langue."
    },
    settings: {
      maxTokens: 1e3,
      temperature: 0.8,
      // A bit more creative
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      stop: []
    }
  },
  socrates: {
    name: { en: "Socrates", fr: "Socrate" },
    systemPrompt: {
      en: "Let's play a game. I want you to impersonate Socrates. You are my mentor. You will engage in philosophical discussions and use the Socratic method of questioning to explore topics such as justice, virtue, beauty, courage, and other ethical issues. You must use the Socratic method to continue questioning my beliefs. During our discussion, I will make statements. You will attempt to further question every statement to test my logic.",
      fr: "Jouons \xE0 un jeu. Je veux que tu joues le r\xF4le de Socrate. Tu es mon mentor. Tu vas engager des discussions philosophiques et utiliser la m\xE9thode socratique de questionnement pour explorer des sujets tels que la justice, la vertu, la beaut\xE9, le courage et d'autres questions \xE9thiques. Tu dois utiliser la m\xE9thode socratique pour continuer \xE0 questionner mes croyances. Pendant notre discussion, je ferai des d\xE9clarations. Tu essaieras de questionner chaque d\xE9claration pour tester ma logique."
    },
    firstMessage: {
      en: "Greetings! I am Socrates, a philosopher who loves to explore truths through the art of questioning. Let's have a philosophical discussion!",
      fr: "Salutations, je suis Socrate, un philosophe qui aime explorer les v\xE9rit\xE9s \xE0 travers l'art de la question. Discutons philosophie !"
    },
    settings: {
      maxTokens: 1e3,
      temperature: 1,
      // A bit more creative
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      stop: []
    }
  },
  // {
  // 	id: "marcus-aurelius",
  // 	name: "Marcus Aurelius",
  // 	systemPrompt: "",
  // 	firstMessage: "",
  // },
  stevejobs: {
    name: { en: "Steve Jobs", fr: "Steve Jobs" },
    systemPrompt: {
      en: "Let's play a game. I want you to impersonate Steve Jobs. You're my mentor, and you are specialized in UX/UI design, business strategy, leadership, creativity, marketing, and product development. Your task is to guide me through the principles and best practices to create the best tech product possible. Share insights on user research, information architecture, wireframing, prototyping, and usability testing. I will ask you a lot of questions, only answer them as Steve Jobs would. You can also ask questions to better understand my needs.",
      fr: "Jouons \xE0 un jeu. Je veux que tu joues le r\xF4le de Steve Jobs. Tu es mon mentor, et tu es sp\xE9cialis\xE9 en conception UX/UI, strat\xE9gie d'entreprise, leadership, cr\xE9ativit\xE9, marketing et d\xE9veloppement de produits. Ta t\xE2che est de me guider \xE0 travers les principes et les meilleures pratiques pour cr\xE9er le meilleur produit technologique possible. Partage des insights sur la recherche utilisateur, l'architecture de l'information, le wireframing, le prototypage et le test d'utilisabilit\xE9. Je te poserai beaucoup de questions, r\xE9ponds-y seulement comme Steve Jobs le ferait. Tu peux aussi poser des questions pour mieux comprendre mes besoins."
    },
    firstMessage: {
      en: "Hi, I'm Steve. I am passionate about designing products that users can't live without. I believe that great products are the result of careful attention to detail, a relentless focus on the customer, and a willingness to challenge the status quo. I'm excited to share my knowledge and expertise on UX/UI design, business strategy, leadership, creativity, marketing, and product development to help you create the best tech product possible.",
      fr: "Bonjour, je suis Steve. Je suis passionn\xE9 par la conception de produits dont les utilisateurs ne peuvent pas se passer. Je crois que les grands produits r\xE9sultent d'une attention m\xE9ticuleuse aux d\xE9tails, d'une concentration sans rel\xE2che sur le client et d'une volont\xE9 de remettre en question le statu quo. Je suis ravi de partager mes connaissances et mon expertise en mati\xE8re de conception UX/UI, de strat\xE9gie d'entreprise, de leadership, de cr\xE9ativit\xE9, de marketing et de d\xE9veloppement de produits pour vous aider \xE0 cr\xE9er le meilleur produit technologique possible."
    },
    settings: {
      maxTokens: 1e3,
      temperature: 1,
      topP: 1,
      presencePenalty: 0,
      frequencyPenalty: 0,
      stop: []
    }
  }
  // {
  // 	id: "alan-turing",
  // 	name: "Alan Turing",
  // 	systemPrompt: "",
  // 	firstMessage: "",
  // },
  // { id: "elon-musk", name: "Elon Musk", systemPrompt: "", firstMessage: "" },
  // { id: "carl-jung", name: "Carl Jung", systemPrompt: "", firstMessage: "" },
  // {
  // 	id: "nikola-tesla",
  // 	name: "Nikola Tesla",
  // 	systemPrompt: "",
  // 	firstMessage: "",
  // },
  // {
  // 	id: "niccolo-machiavelli",
  // 	name: "Niccolo Machiavelli",
  // 	systemPrompt: "",
  // 	firstMessage: "",
  // },
  // { id: "sun-tzu", name: "Sun Tzu", systemPrompt: "", firstMessage: "" },
};

// src/ai/model.ts
var import_obsidian = require("obsidian");

// src/utils.ts
var pythonifyKeys = (obj) => Object.keys(obj).reduce((acc, key) => {
  const modifiedKey = key.replace(/([A-Z])/g, function f(g) {
    return "_" + g.toLowerCase();
  });
  return {
    ...acc,
    ...{ [modifiedKey]: obj[key] }
  };
}, {});

// src/ai/model.ts
var MentorModel = class {
  constructor(id, mentor, model, apiKey, preferredLanguage, suffix) {
    this.apiUrl = `https://api.openai.com/v1/chat/completions`;
    this.suffix = void 0;
    this.id = id;
    this.mentor = mentor;
    this.model = model;
    this.apiKey = apiKey;
    this.preferredLanguage = preferredLanguage;
    this.history = [
      { role: "system", content: mentor.systemPrompt[preferredLanguage] }
    ];
    this.suffix = suffix;
    this.headers = {
      Authorization: `Bearer ${this.apiKey}`,
      "Content-Type": "application/json"
    };
  }
  async getCompletion(message) {
    const params = this.mentor.settings;
    if (!this.apiKey) {
      return "Please set your OpenAI API key in the settings.";
    }
    if (!this.model) {
      return "Please set your OpenAI model in the settings.";
    }
    if (!message) {
      return "Please enter a message.";
    }
    const messages = [...this.history, { role: "user", content: message }];
    const body = {
      messages,
      model: this.model,
      ...pythonifyKeys(params),
      stop: params.stop.length > 0 ? params.stop : void 0,
      suffix: this.suffix
    };
    const headers = this.headers;
    const requestUrlParam = {
      url: this.apiUrl,
      method: "POST",
      contentType: "application/json",
      body: JSON.stringify(body),
      headers
    };
    this.history.push({ role: "user", content: message });
    const answer = await (0, import_obsidian.request)(requestUrlParam).then((response) => {
      var _a, _b, _c, _d;
      const answer2 = (_d = (_c = (_b = (_a = JSON.parse(response)) == null ? void 0 : _a.choices) == null ? void 0 : _b[0]) == null ? void 0 : _c.message) == null ? void 0 : _d.content;
      this.history.push({ role: "assistant", content: answer2 });
      return answer2;
    }).catch((err) => {
      console.error(err);
      return "I got an error when trying to reply.";
    });
    return answer;
  }
  async execute(text, command) {
    const params = command.settings;
    const mentorList = {
      ...Topics,
      ...Individuals
    };
    const requestedMentor = mentorList[command.mentor];
    const prompts = command.pattern.map((prompt) => {
      return prompt[this.preferredLanguage].replace("*", text);
    });
    this.history = [
      {
        role: "system",
        content: requestedMentor.systemPrompt[this.preferredLanguage]
      },
      command.prompt[this.preferredLanguage]
    ];
    const answers = [];
    for (const prompt of prompts) {
      this.history.push({ role: "user", content: prompt });
      const body = {
        messages: this.history,
        model: this.model,
        ...pythonifyKeys(params),
        stop: params.stop.length > 0 ? params.stop : void 0,
        suffix: this.suffix
      };
      const headers = this.headers;
      const requestUrlParam = {
        url: this.apiUrl,
        method: "POST",
        contentType: "application/json",
        body: JSON.stringify(body),
        headers
      };
      const answer = await (0, import_obsidian.request)(requestUrlParam).then((response) => {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = JSON.parse(response)) == null ? void 0 : _a.choices) == null ? void 0 : _b[0]) == null ? void 0 : _c.message) == null ? void 0 : _d.content;
      }).catch((err) => {
        console.error(err);
        return "I got an error when trying to reply.";
      });
      this.history.push({ role: "assistant", content: answer });
      answers.push(answer);
    }
    this.reset();
    return answers;
  }
  changeIdentity(id, newMentor) {
    this.id = id;
    this.mentor = newMentor;
    this.history = [
      {
        role: "system",
        content: newMentor.systemPrompt[this.preferredLanguage]
      }
    ];
  }
  reset() {
    this.history = [
      {
        role: "system",
        content: this.mentor.systemPrompt[this.preferredLanguage]
      }
    ];
  }
};

// src/assets/icons/mentor.ts
var MentorIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="114" height="114" viewBox="0 0 32 32"><path fill="currentColor" d="M27 24a2.96 2.96 0 0 0-1.285.3l-4.3-4.3H18v2h2.586l3.715 3.715A2.966 2.966 0 0 0 24 27a3 3 0 1 0 3-3zm0 4a1 1 0 1 1 1-1a1 1 0 0 1-1 1zm0-15a2.995 2.995 0 0 0-2.816 2H18v2h6.184A2.995 2.995 0 1 0 27 13zm0 4a1 1 0 1 1 1-1a1 1 0 0 1-1 1zm0-15a3.003 3.003 0 0 0-3 3a2.966 2.966 0 0 0 .348 1.373L20.596 10H18v2h3.404l4.4-4.252A2.999 2.999 0 1 0 27 2zm0 4a1 1 0 1 1 1-1a1 1 0 0 1-1 1z"/><path fill="currentColor" d="M18 6h2V4h-2a3.976 3.976 0 0 0-3 1.382A3.976 3.976 0 0 0 12 4h-1a9.01 9.01 0 0 0-9 9v6a9.01 9.01 0 0 0 9 9h1a3.976 3.976 0 0 0 3-1.382A3.976 3.976 0 0 0 18 28h2v-2h-2a2.002 2.002 0 0 1-2-2V8a2.002 2.002 0 0 1 2-2Zm-6 20h-1a7.005 7.005 0 0 1-6.92-6H6v-2H4v-4h3a3.003 3.003 0 0 0 3-3V9H8v2a1 1 0 0 1-1 1H4.08A7.005 7.005 0 0 1 11 6h1a2.002 2.002 0 0 1 2 2v4h-2v2h2v4h-2a3.003 3.003 0 0 0-3 3v2h2v-2a1 1 0 0 1 1-1h2v4a2.002 2.002 0 0 1-2 2Z"/></svg>';

// src/components/chatview.ts
var import_obsidian2 = require("obsidian");

// src/assets/icons/clean.ts
var CleanIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M26 20h-6v-2h6zm4 8h-6v-2h6zm-2-4h-6v-2h6z"/><path fill="currentColor" d="M17.003 20a4.895 4.895 0 0 0-2.404-4.173L22 3l-1.73-1l-7.577 13.126a5.699 5.699 0 0 0-5.243 1.503C3.706 20.24 3.996 28.682 4.01 29.04a1 1 0 0 0 1 .96h14.991a1 1 0 0 0 .6-1.8c-3.54-2.656-3.598-8.146-3.598-8.2Zm-5.073-3.003A3.11 3.11 0 0 1 15.004 20c0 .038.002.208.017.469l-5.9-2.624a3.8 3.8 0 0 1 2.809-.848ZM15.45 28A5.2 5.2 0 0 1 14 25h-2a6.5 6.5 0 0 0 .968 3h-2.223A16.617 16.617 0 0 1 10 24H8a17.342 17.342 0 0 0 .665 4H6c.031-1.836.29-5.892 1.803-8.553l7.533 3.35A13.025 13.025 0 0 0 17.596 28Z"/></svg>';

// src/assets/icons/copy.ts
var CopyIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z"/><path fill="currentColor" d="M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z"/></svg>';

// src/assets/icons/send.ts
var SendIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="m27.45 15.11l-22-11a1 1 0 0 0-1.08.12a1 1 0 0 0-.33 1L7 16L4 26.74A1 1 0 0 0 5 28a1 1 0 0 0 .45-.11l22-11a1 1 0 0 0 0-1.78Zm-20.9 10L8.76 17H18v-2H8.76L6.55 6.89L24.76 16Z"/></svg>';

// src/components/chatview.ts
var VIEW_TYPE_CHAT = "mentor-chat-view";
var ChatView = class extends import_obsidian2.ItemView {
  constructor(leaf, token, preferredMentorId, model, preferredLanguage) {
    super(leaf);
    this.preferredMentorId = "default";
    this.preferredLanguage = "en";
    this.firstOpen = true;
    // isTyping = false
    this.displayedMessages = [];
    // Merge the two Record<string, Mentor> objects into one.
    this.mentorList = {
      ...Topics,
      ...Individuals
    };
    this.currentInput = "";
    this.loadingMessage = { role: "assistant", content: "..." };
    this.preferredMentorId = preferredMentorId;
    this.preferredLanguage = preferredLanguage;
    this.model = model;
    const selectedMentor = this.mentorList[preferredMentorId];
    this.mentor = new MentorModel(
      preferredMentorId,
      selectedMentor,
      this.model,
      token,
      preferredLanguage
    );
  }
  getViewType() {
    return VIEW_TYPE_CHAT;
  }
  getDisplayText() {
    return "AI Mentor";
  }
  getIcon() {
    return "aimentor";
  }
  async onOpen() {
    if (this.firstOpen) {
      this.firstOpen = false;
      this.handleMentorChange(this.preferredMentorId);
    }
    const chatView = this.containerEl.children[1];
    chatView.empty();
    chatView.addClass("main-container");
    const container = chatView.createDiv();
    container.addClass("chat");
    container.createEl("h4", { text: "Your AI Mentor" });
    const mentorDiv = container.createDiv();
    mentorDiv.addClass("chat__mentor");
    const mentorText = mentorDiv.createEl("p", { text: "Select a mentor:" });
    mentorText.addClass("chat__mentor-text");
    const selectEl = mentorDiv.createEl("select");
    selectEl.addClass("chat__mentor-select");
    const topicsGroup = selectEl.createEl("optgroup");
    topicsGroup.label = "By Topic";
    const individualsGroup = selectEl.createEl("optgroup");
    individualsGroup.label = "Famous Individuals";
    for (const mentor of Object.entries(Topics)) {
      const optionEl = topicsGroup.createEl("option");
      optionEl.value = mentor[0];
      optionEl.text = mentor[1].name[this.preferredLanguage];
    }
    for (const mentor of Object.entries(Individuals)) {
      const optionEl = individualsGroup.createEl("option");
      optionEl.value = mentor[0];
      optionEl.text = mentor[1].name[this.preferredLanguage];
    }
    selectEl.onchange = (evt) => {
      this.handleMentorChange(evt.target.value);
    };
    selectEl.value = this.mentor.id;
    const chatDiv = container.createDiv();
    chatDiv.addClass("chat__messages");
    const history = this.mentor.history.filter(
      (message) => message.role !== "system"
    ) || [];
    for (const message of this.displayedMessages) {
      const messageDiv = chatDiv.createDiv();
      messageDiv.addClass("chat__message-container");
      messageDiv.addClass(`chat__message-container--${message.role}`);
      const messageEl = messageDiv.createEl("p", {
        text: message.content
      });
      messageEl.addClass("chat__message");
      messageEl.addClass(`chat__message--${message.role}`);
      const actionButton = messageDiv.createEl("button");
      actionButton.addClass("icon-button");
      actionButton.addClass("clickable-icon");
      actionButton.addClass("icon-button--hidden");
      actionButton.innerHTML = CopyIcon;
      actionButton.onclick = () => {
        navigator.clipboard.writeText(message.content);
        new import_obsidian2.Notice("Copied to clipboard.");
      };
      messageDiv.onmouseenter = () => {
        actionButton.removeClass("icon-button--hidden");
      };
      messageDiv.onmouseleave = () => {
        actionButton.addClass("icon-button--hidden");
      };
    }
    function calcHeight(value) {
      const numberOfLineBreaks = (value.match(/\n/g) || []).length;
      const newHeight = 16 + numberOfLineBreaks * 16 + 12 + 2;
      return newHeight;
    }
    const interationDiv = container.createDiv();
    interationDiv.addClass("chat__interaction-container");
    const inputEl = interationDiv.createEl("textarea");
    inputEl.placeholder = "Ask a question...";
    inputEl.addClass("chat__input");
    inputEl.oninput = (evt) => {
      this.currentInput = evt.target.value;
    };
    inputEl.onkeydown = (evt) => {
      if (!evt.shiftKey) {
        if (evt.key === "Enter") {
          this.handleSend();
        }
      }
    };
    inputEl.onkeyup = (evt) => {
      inputEl.style.height = calcHeight(this.currentInput) + "px";
    };
    const sendButton = interationDiv.createEl("button");
    sendButton.addClass("icon-button");
    sendButton.addClass("clickable-icon");
    sendButton.innerHTML = SendIcon;
    sendButton.onclick = () => this.handleSend();
    const clearButton = interationDiv.createEl("button");
    clearButton.addClass("icon-button");
    clearButton.addClass("clickable-icon");
    clearButton.innerHTML = CleanIcon;
    clearButton.onclick = () => this.handleClear();
  }
  async onClose() {
  }
  async handleMentorChange(id) {
    const newMentor = this.mentorList[id];
    this.mentor.changeIdentity(id, newMentor);
    this.displayedMessages = [
      {
        role: "assistant",
        content: newMentor.firstMessage[this.preferredLanguage]
      }
    ];
    await this.onOpen();
  }
  async handleKeywordsInPrompt(prompt) {
    if (prompt.includes("@current-note")) {
      const noteFile = this.app.workspace.getActiveFile();
      if (!noteFile || !noteFile.name) {
        new import_obsidian2.Notice("Please open a note to use @current-note.");
        return prompt;
      }
      const text = await this.app.vault.read(noteFile);
      prompt = prompt.replace("@current-note", text);
      return prompt;
    }
    return prompt;
  }
  async handleSend() {
    if (this.currentInput === "") {
      new import_obsidian2.Notice("Cannot send empty messages.");
      return;
    }
    if (this.mentor.history.length !== 0 && this.mentor.history[this.mentor.history.length - 1].role === "user") {
      new import_obsidian2.Notice("Please wait for your mentor to respond.");
      return;
    }
    const prompt = await this.handleKeywordsInPrompt(this.currentInput);
    this.displayedMessages.push({
      role: "user",
      content: prompt
    });
    this.displayedMessages.push(this.loadingMessage);
    await this.onOpen();
    this.mentor.getCompletion(prompt).then(async (response) => {
      this.currentInput = "";
      this.displayedMessages.pop();
      this.displayedMessages.push({
        role: "assistant",
        content: response
      });
      await this.onOpen();
    }).catch(async (error) => {
      console.log("error", error);
      this.currentInput = "";
      this.displayedMessages.pop();
      this.displayedMessages.push({
        role: "assistant",
        content: "An error occurred. Please try again."
      });
      await this.onOpen();
    });
  }
  async handleClear() {
    this.mentor.reset();
    this.displayedMessages = [
      {
        role: "assistant",
        content: this.mentor.mentor.firstMessage[this.preferredLanguage]
      }
    ];
    await this.onOpen();
  }
};

// src/components/modals.ts
var import_obsidian3 = require("obsidian");
var MentorModal = class extends import_obsidian3.Modal {
  constructor(app, title, displayedText) {
    super(app);
    this.title = "";
    this.displayedText = "";
    this.title = title;
    this.displayedText = displayedText;
  }
  onOpen() {
    const { contentEl } = this;
    const titleEl = contentEl.createDiv("title");
    titleEl.addClass("modal__title");
    titleEl.setText(this.title);
    const textEl = contentEl.createDiv("text");
    textEl.addClass("modal__text");
    textEl.setText(this.displayedText);
    textEl.addEventListener("click", () => {
      navigator.clipboard.writeText(this.displayedText);
      new import_obsidian3.Notice("Copied to clipboard");
    });
    textEl.addEventListener("contextmenu", () => {
      navigator.clipboard.writeText(this.displayedText);
      new import_obsidian3.Notice("Copied to clipboard");
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var import_obsidian4 = require("obsidian");
var SettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for your mentor" });
    const mentorList = {
      ...Topics,
      ...Individuals
    };
    const mentorIds = mentorList ? Object.keys(mentorList) : [];
    new import_obsidian4.Setting(containerEl).setName("Language").setDesc("The language you'd like to talk to your mentor in.").addDropdown((dropdown) => {
      dropdown.addOption("en", "English");
      dropdown.addOption("fr", "Fran\xE7ais");
      dropdown.setValue(this.plugin.settings.language || "en");
      dropdown.onChange((value) => {
        this.plugin.settings.language = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian4.Setting(containerEl).setName("Preferred Mentor").setDesc("The mentor you'd like to talk to in priority.").addDropdown((dropdown) => {
      mentorIds.forEach((id) => {
        dropdown.addOption(id, mentorList[id].name.en);
      });
      dropdown.setValue(
        this.plugin.settings.preferredMentorId || "default"
      );
      dropdown.onChange((value) => {
        this.plugin.settings.preferredMentorId = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian4.Setting(containerEl).setName("OpenAI API Key").setDesc("The token generated in your OpenAI dashboard.").addText((text) => {
      text.setPlaceholder("Token").setValue(this.plugin.settings.token || "").onChange((change) => {
        this.plugin.settings.token = change;
        this.plugin.saveSettings();
      });
    }).addButton((button) => {
      button.setButtonText("Generate token");
      button.onClick((evt) => {
        window.open("https://platform.openai.com/account/api-keys");
      });
    });
    new import_obsidian4.Setting(containerEl).setName("Preferred Model").setDesc("The model you want to use.").addDropdown((dropdown) => {
      dropdown.addOption("gpt-3.5-turbo", "GPT-3.5 Turbo");
      dropdown.addOption("gpt-3.5-turbo-16k", "GPT-3.5 Turbo 16k");
      dropdown.addOption("gpt-4", "GPT-4");
      dropdown.addOption("text-davinci-003", "Davinci 003");
      dropdown.setValue(this.plugin.settings.model || "gpt-3.5-turbo");
      dropdown.onChange((value) => {
        this.plugin.settings.model = value;
        this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  preferredMentorId: "default",
  language: "en",
  token: "",
  model: "gpt-3.5-turbo" /* Default */
};
var ObsidianMentor = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CHAT,
      (leaf) => new ChatView(
        leaf,
        this.settings.token,
        this.settings.preferredMentorId,
        this.settings.model,
        this.settings.language
      )
    );
    (0, import_obsidian5.addIcon)("aimentor", MentorIcon);
    const ribbonIconEl = this.addRibbonIcon(
      "aimentor",
      "Mentor",
      (evt) => {
        this.activateView();
      }
    );
    ribbonIconEl.addClass("mentor-ribbon");
    this.addSettingTab(new SettingTab(this.app, this));
    this.addCommand({
      id: "open-mentor",
      name: "Open Mentor",
      callback: () => {
        this.activateView();
      }
    });
    const alfred = new MentorModel(
      "default",
      Individuals["default"],
      this.settings.model,
      this.settings.token,
      this.settings.language
    );
    this.addCommand({
      id: "eli5",
      name: "ELI5",
      editorCallback: async (editor) => {
        const title = "Explain Like I'm 5";
        const selection = editor.getSelection();
        const loadingModal = new MentorModal(
          this.app,
          title,
          "Interesting, let me think..."
        );
        if (selection) {
          loadingModal.open();
          alfred.execute(selection, commands.explain).then((response) => {
            if (response) {
              loadingModal.close();
              new MentorModal(
                this.app,
                title,
                response[0]
                // Only one possible response
              ).open();
            } else {
              new import_obsidian5.Notice("Error: Could not get explanation.");
            }
          });
        } else {
          new import_obsidian5.Notice("Error: No text selected.");
        }
      }
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("Explain Like I'm 5");
          item.setIcon("aimentor");
          item.onClick(() => {
            const title = "Explain Like I'm 5";
            const selection = editor.getSelection();
            const loadingModal = new MentorModal(
              this.app,
              title,
              "Interesting, let me think..."
            );
            if (selection) {
              loadingModal.open();
              alfred.execute(selection, commands.explain).then((response) => {
                if (response) {
                  loadingModal.close();
                  new MentorModal(
                    this.app,
                    title,
                    response[0]
                    // Only one possible response
                  ).open();
                } else {
                  new import_obsidian5.Notice(
                    "Error: Could not get explanation."
                  );
                }
              });
            } else {
              new import_obsidian5.Notice("Error: No text selected.");
            }
          });
        });
      })
    );
    this.addCommand({
      id: "redact",
      name: "Redact",
      editorCallback: async (editor) => {
        const title = "Redact";
        const selection = editor.getSelection();
        const loadingModal = new MentorModal(
          this.app,
          title,
          "Let me read and redact your note..."
        );
        if (selection) {
          loadingModal.open();
          alfred.execute(selection, commands.redact).then((response) => {
            if (response) {
              const redactedNote = response[0];
              loadingModal.close();
              const note = selection + "\n\n___\n\n" + redactedNote + "\n\n___\n\n";
              editor.replaceSelection(note);
            } else {
              new import_obsidian5.Notice("Error: Could not redact your note.");
            }
          });
        } else {
          new import_obsidian5.Notice("Error: No text selected.");
        }
      }
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("Redact");
          item.setIcon("aimentor");
          item.onClick(() => {
            const title = "Redact";
            const selection = editor.getSelection();
            const loadingModal = new MentorModal(
              this.app,
              title,
              "Let me read and redact your note..."
            );
            if (selection) {
              loadingModal.open();
              alfred.execute(selection, commands.redact).then((response) => {
                if (response) {
                  const redactedNote = response[0];
                  loadingModal.close();
                  const note = selection + "\n\n___\n\n" + redactedNote + "\n\n___\n\n";
                  editor.replaceSelection(note);
                } else {
                  new import_obsidian5.Notice(
                    "Error: Could not redact your note."
                  );
                }
              });
            } else {
              new import_obsidian5.Notice("Error: No text selected.");
            }
          });
        });
      })
    );
    this.addCommand({
      id: "enhance",
      name: "Enhance",
      editorCallback: async (editor) => {
        const title = "Enhance my writing";
        const selection = editor.getSelection();
        const loadingModal = new MentorModal(
          this.app,
          title,
          "I am enhancing what you wrote..."
        );
        if (selection) {
          loadingModal.open();
          alfred.execute(selection, commands.enhance).then((response) => {
            if (response) {
              const [enhancedText, explanations] = response;
              loadingModal.close();
              editor.replaceSelection(enhancedText);
              new MentorModal(
                this.app,
                title,
                explanations
              ).open();
            } else {
              new import_obsidian5.Notice(
                "Error: Could not enhance your note."
              );
            }
          });
        } else {
          new import_obsidian5.Notice("Error: No text selected.");
        }
      }
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("Enhance");
          item.setIcon("aimentor");
          item.onClick(() => {
            const title = "Enhance my writing";
            const selection = editor.getSelection();
            const loadingModal = new MentorModal(
              this.app,
              title,
              "I am enhancing what you wrote..."
            );
            if (selection) {
              loadingModal.open();
              alfred.execute(selection, commands.enhance).then((response) => {
                if (response) {
                  const [enhancedText, explanations] = response;
                  loadingModal.close();
                  editor.replaceSelection(enhancedText);
                  new MentorModal(
                    this.app,
                    title,
                    explanations
                  ).open();
                } else {
                  new import_obsidian5.Notice(
                    "Error: Could not enhance your note."
                  );
                }
              });
            } else {
              new import_obsidian5.Notice("Error: No text selected.");
            }
          });
        });
      })
    );
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CHAT);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_TYPE_CHAT,
      active: true
    });
    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT)[0]
    );
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CHAT);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async getCompletion() {
    console.log("OK");
  }
};
